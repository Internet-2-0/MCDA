{"data":{"data":{"signatures":[{"discovered":6.312821067730499,"info":{"description":"File entropy is the randomness of a file measured on a scale of 1-8. Higher entropy potentially indicates packed or encrypted data such as payloads or hidden PE files within the program. The higher the entropy the more likely it is that that program is encrypted or packed.","title":"File Entropy"}},{"discovered":["IsDebuggerPresent","GetModuleFileNameA","SetUnhandledExceptionFilter","UnhandledExceptionFilter","QueryPerformanceCounter","GetTickCount"],"info":{"description":"Anti-debugging is a set of techniques used within the code of an application to detect and prevent the act of debugging. This stops attackers from dynamically running applications, trying to understand how they work and changing the behavior of certain features or checks within the application. Malicious applications use anti-debugging to prevent reverse engineers from dynamically analyzing the code and can potentially be an indication of malware.","title":"Anti-Debugging Imports"}},{"discovered":["Accept","CreateFile","CreateFileMapping","CreateMutex","GetDC","GetForegroundWindow","GetModuleFilename","GetModuleHandle","GetProcAddress","GetStartupInfo","MapViewOfFile","OpenProcess","OutputDebugString","RegOpenKey","Send","ShellExecute","System","WideCharToMultiByte","GetMessage","DispatchMessage","LoadLibrary","FindClose","FreeLibrary","GetCurrentProcess","GetCurrentThreadId","GetTickCount","OpenProcessToken","RaiseException","SetUnhandledExceptionFilter","UnhandledExceptionFilter"],"info":{"description":"The file statically imports commonly known malicious Windows API endpoints, or imports Windows libraries that have been used by multiple malware samples over time. It is possible that these imports are never used.","title":"Imports Known Malicious Endpoints"}},{"discovered":{"signed":false},"info":{"description":"The file is not signed by a distributor (IE Microsoft). This means that the file has no verification and may be dangerous in nature. This is not an indicator that the file is malicious, but is a warning that there is no valid signature in the binary file.","title":"No Signature Detected in Binary File"}},{"discovered":[{"raw_address":"0x0002BD2E","virtual_address":"0x0042CF2E","section_name":".rdata","cave_byte_size":378},{"raw_address":"0x0002E891","virtual_address":"0x00430691","section_name":".data","cave_byte_size":511},{"raw_address":"0x0002EA91","virtual_address":"0x00430891","section_name":".data","cave_byte_size":511}],"info":{"description":"A code cave is a series of unused bytes in a process's memory. This series of bytes can be used to inject custom instructions into the memory. This is a well known tactic for hiding malware inside of known applications but does not always mean that there is an issue.","title":"Code Cave"}},{"discovered":"safe\n","info":{"description":"Malcore attempts to classify each file processed through an AI driven classifier.","title":"Malcore AI File Classification"}},{"discovered":{"unmarked_objects":{"is_unmarked_object":true,"total_unmarked_objects":2}},"info":{"description":"In Windows binary files there is a section called 'the Rich PE header section'. This section is responsible for (it is assumed) providing a development environment fingerprint. Anomalies inside of this header include invalid checksums, invalid xor keys, malformed 'rich data' or rich data removed, and unmarked objects in the build information. If some these occur, it is more likely that the file was tampered with, and is potentially an indicator of malicious intents.","title":"Rich PE Header Anomaly"}}],"score":"14.15/100"},"isMaintenance":false,"success":true,"messages":[{"type":"success","code":200,"message":"Scan ran"}]},"isMaintenance":false,"success":true}