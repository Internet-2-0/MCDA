{"data":{"data":{"signatures":[{"discovered":6.700175464943675,"info":{"description":"File entropy is the randomness of a file measured on a scale of 1-8. Higher entropy potentially indicates packed or encrypted data such as payloads or hidden PE files within the program. The higher the entropy the more likely it is that that program is encrypted or packed.","title":"File Entropy"}},{"discovered":[["add edx, 0x28","cmp edx, esi","jne 0x10020cb5","xor eax, eax","pop esi","pop ebp"],["call fcn.10021830","test eax, eax","jne 0x10020ce0","xor al, al","ret","mov eax, dword fs:[0x18]"],["jmp 0x10020cf5","cmp edx, eax","je 0x10020d05","xor eax, eax","mov ecx, edx","lock cmpxchg dword [esi], ecx"],["lock cmpxchg dword [esi], ecx","test eax, eax","jne 0x10020cf1","xor al, al","pop esi","ret"],["pop ecx","test eax, eax","je 0x10020d2c","xor al, al","ret","call fcn.1002d8f9"],["call fcn.10025488","test al, al","jne 0x10020d4e","xor al, al","ret","call fcn.1002de25"]],"info":{"description":"Suspicious assembly calls are calls that are using jumps, calls, or xor in quick succession of one another, these are potentially indicators of on the fly loading of imports (dynamic import loading), cryptographic intentions (such as ransomware, or encryption/decryption techniques), or possibly even sandbox evasion. These are suspicious in nature due to the file type.","title":"Suspicious Assembly"}},{"discovered":["IsDebuggerPresent","QueryPerformanceCounter","GetTickCount","SetUnhandledExceptionFilter","OutputDebugStringA","UnhandledExceptionFilter","GetModuleFileNameA"],"info":{"description":"Anti-debugging is a set of techniques used within the code of an application to detect and prevent the act of debugging. This stops attackers from dynamically running applications, trying to understand how they work and changing the behavior of certain features or checks within the application. Malicious applications use anti-debugging to prevent reverse engineers from dynamically analyzing the code and can potentially be an indication of malware.","title":"Anti-Debugging Imports"}},{"discovered":["Connect","CreateFile","CreateProcess","FindResource","GetModuleFilename","GetModuleHandle","GetProcAddress","GetStartupInfo","GetTempPath","GetVersionEx","GetWindowsDirectory","IsWoW64Process","LoadResource","OpenProcess","OutputDebugString","RegOpenKey","ResumeThread","ShellExecute","System","WideCharToMultiByte","socket","SizeOfResource","LockResource","LoadLibrary","VirtualProtect","FindClose","FlushFileBuffers","FreeEnvironmentStringsW","FreeLibrary","GetCommandLineA","GetCurrentProcess","GetCurrentThreadId","GetFileType","GetTickCount","OpenProcessToken","RaiseException","SetEnvironmentVariableA","SetStdHandle","SetUnhandledExceptionFilter","UnhandledExceptionFilter"],"info":{"description":"The file statically imports commonly known malicious Windows API endpoints, or imports Windows libraries that have been used by multiple malware samples over time. It is possible that these imports are never used.","title":"Imports Known Malicious Endpoints"}},{"discovered":{"signed":false},"info":{"description":"The file is not signed by a distributor (IE Microsoft). This means that the file has no verification and may be dangerous in nature. This is not an indicator that the file is malicious, but is a warning that there is no valid signature in the binary file.","title":"No Signature Detected in Binary File"}},{"discovered":"malicious\n","info":{"description":"Malcore attempts to classify each file processed through an AI driven classifier.","title":"Malcore AI File Classification"}},{"discovered":{"unmarked_objects":{"is_unmarked_object":true,"total_unmarked_objects":2}},"info":{"description":"In Windows binary files there is a section called 'the Rich PE header section'. This section is responsible for (it is assumed) providing a development environment fingerprint. Anomalies inside of this header include invalid checksums, invalid xor keys, malformed 'rich data' or rich data removed, and unmarked objects in the build information. If some these occur, it is more likely that the file was tampered with, and is potentially an indicator of malicious intents.","title":"Rich PE Header Anomaly"}}],"score":"23.65/100"},"isMaintenance":false,"success":true,"messages":[{"type":"success","code":200,"message":"Scan ran"}]},"isMaintenance":false,"success":true}